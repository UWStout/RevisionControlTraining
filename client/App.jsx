// Main React Library
import React, { useRef } from 'react'

// React-three-fiber Library
import { Canvas, useFrame } from '@react-three/fiber'

// Drei R3F helpers
import { useGLTF, Stage, Grid, OrbitControls, Environment } from '@react-three/drei'

// R3F Postprocessing library
import { EffectComposer, Bloom, ToneMapping } from '@react-three/postprocessing'

// Eased animations
import { easing } from 'maath'

export default function App () {
  return (
    // The main container for the entire world
    <Canvas flat shadows camera={{ position: [-15, 0, 10], fov: 45 }}>
      {/* Fog for distant objects */}
      <fog attach="fog" args={['black', 15, 22.5]} />

      {/* General PBR studio lighting and shadow calculations */}
      <Stage
        intensity={0.5}
        environment="city"
        shadows={{
          type: 'accumulative',
          bias: -0.001,
          intensity: Math.PI
        }}
        adjustCamera={false}
      >
        {/* Render the drone and its lights (see Kamdo() method below) */}
        <Kamdo rotation={[0, Math.PI, 0]} />
      </Stage>

      {/* Render a regular grid as the floor */}
      <Grid renderOrder={-1} position={[0, -1.85, 0]} infiniteGrid cellSize={0.6} cellThickness={0.6} sectionSize={3.3} sectionThickness={1.5} sectionColor={[0.5, 0.5, 10]} fadeDistance={30} />

      {/* Provide basic orbit controls */}
      <OrbitControls autoRotate autoRotateSpeed={0.5} enableZoom={true} makeDefault minPolarAngle={Math.PI / 4} maxPolarAngle={Math.PI / 2} />

      {/* Provide post-processing effects */}
      <EffectComposer disableNormalPass>
        <Bloom luminanceThreshold={2} mipmapBlur />
        <ToneMapping />
      </EffectComposer>

      {/* Render the skybox that matches the stage environment */}
      <Environment background preset="sunset" blur={0.8} />
    </Canvas>
  )
}

/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.1.0 s2wt_kamdo_industrial_divinities.glb --transform --simplify
  Author: Hansalex (https://sketchfab.com/Hansalex)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/s2wt-kamdo-industrial-divinities-f503b70ac05e49a38c81100d71599a1b
  Title: S2WT "Kamdo" (Industrial Divinities)
*/

function Kamdo (props) {
  // Forward references to internal nodes
  const head = useRef()
  const stripe = useRef()
  const light = useRef()

  // Load the model
  const { nodes, materials } = useGLTF('/s2wt_kamdo_industrial_divinities-transformed.glb')

  // Every Frame, run this
  useFrame((state, delta) => {
    // Pulse the emissive stripe color over time
    const t = (1 + Math.sin(state.clock.elapsedTime * 2)) / 2
    stripe.current.color.setRGB(2 + t * 20, 2, 20 + t * 50)

    // Rotate the head (using easing and damping)
    easing.dampE(head.current.rotation, [0, state.pointer.x * (state.camera.position.z > 1 ? 1 : -1), 0], 0.4, delta)

    // Pulse the light under the drone
    light.current.intensity = 1 + t * 4
  })
  return (
    <group {...props}>
      {/* Create mesh node for body */}
      <mesh castShadow receiveShadow geometry={nodes.body001.geometry} material={materials.Body} />

      {/* Create group for head, strip material, and point light */}
      <group ref={head}>
        <mesh castShadow receiveShadow geometry={nodes.head001.geometry} material={materials.Head} />

        {/* Create glowing stripe and point light under drone */}
        <mesh castShadow receiveShadow geometry={nodes.stripe001.geometry}>
          <meshBasicMaterial ref={stripe} toneMapped={false} />
          <pointLight ref={light} intensity={1} color={[10, 2, 5]} distance={2.5} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('./s2wt_kamdo_industrial_divinities-transformed.glb')
